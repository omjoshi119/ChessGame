namespace ChessLogic
{
    public class Bishop : Piece
    {
        public override PieceType Type => PieceType.Bishop; //This line defines a property `Type` in a class that overrides Piece class property to always return `PieceType.Bishop`.
        public override Player Color { get; }

        private static readonly Direction[] dirs = new Direction[] // ALL DIAGONALS FOR BISHOP
        {
            Direction.NorthWest,
            Direction.NorthEast,
            Direction.SouthWest,
            Direction.SouthEast,

        };
        public Bishop(Player color) 
        {
            Color = color;
        }

        public override Piece Copy()
        {
            Bishop copy = new Bishop(Color);
            copy.HasMoved = HasMoved;
            return copy;
        }

        public override IEnumerable<Move> GetMoves(Position from, Board board)
        {
            return MovePositionsInDirs(from, board, dirs).Select(to => new NormalMove(from,to)); //  The method returns an enumerable collection of `NormalMove` objects, representing all possible moves from the given position by transforming valid destination positions generated by `MovePositionsInDirs`.
        }


    }
}
